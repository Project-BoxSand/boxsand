runtime! debian.vim

if has("syntax")
  syntax on
endif



" GENERAL OPTIONS
behave xterm
"set viminfo='20,\"500,%	" ' Maximum number of previously edited files for which the marks
			"   are remembered.  
			" " Maximum number of lines saved for each register.
			" % When included, save and restore the buffer list.  If Vim is
			"   started with a file name argument, the buffer list is not
			"   restored.  If Vim is started without a file name argument, the
			"   buffer list is restored from the viminfo file.  Buffers
			"   without a file name and buffers for help files are not written
			"   to the viminfo file.
set history=500		" keep {number} lines of command line history
set nowrap              " whether to wrap lines
set tabstop=3		" ts, number of spaces that a tab is equivalent to
set shiftwidth=3	" sw, number of spaces shifted left and righ when issuing << and >>
			"  commands
set softtabstop=3
set expandtab
" set textwidth=80
set number		" number lines
set nocompatible
set incsearch
set showmatch
set backspace=2 " should work, so should the set backspace=indent,eol,start

" more backspace workarounds
set backspace=indent,eol,start


set cinoptions=:0,p0,t0
set cinwords=if,unless,else,while,until,do,for,switch,case
set formatoptions=tcqr
set cindent

" VIM DISPLAY OPTIONS
" set showmode		" show which mode (insert, replace, visual)
" set ruler
" set title
" set showcmd		" show commands in status line when typing
" set wildmenu	

"auto header entry for c files
"autocmd bufnewfile *.c so ~/misc/stubs/c/c_c_vim_header.txt
"autocmd bufnewfile *.c exe "1," . 10 . "g/File Name:.*/s//File Name: " .expand ("%")
"autocmd bufnewfile *.c exe "1," . 10 . "g/Creation Date:.*/s//Creation Date: " .strftime("%d-%m-%Y")
"autocmd Bufwritepre,filewritepre *.c execute "normal ma"
"autocmd Bufwritepre,filewritepre *.c exe "1," . 10 . "g/Last Modified:.*/s/Last Modified:.*/Last Modified: " .strftime("%c")
"autocmd bufwritepost,filewritepost *.c execute "normal `a"

"autocmd bufnewfile *.h so ~/misc/stubs/c/c_h_vim_header.txt
"autocmd bufnewfile *.h exe "1," . 10 . "g/File Name:.*/s//File Name: " .expand ("%")
"autocmd bufnewfile *.h exe "1," . 10 . "g/Creation Date:.*/s//Creation Date: " .strftime("%d-%m-%Y")
"autocmd Bufwritepre,filewritepre *.h execute "normal ma"
"autocmd Bufwritepre,filewritepre *.h exe "1," . 10 . "g/Last Modified:.*/s/Last Modified:.*/Last Modified: " .strftime("%c")
"autocmd bufwritepost,filewritepost *.h execute "normal `a"

"auto header entry for tex files"
"autocmd bufnewfile *.tex so ~/misc/stubs/tex/tex_vim_header.txt
"autocmd bufnewfile *.tex exe "1," . 10 . "g/File Name:.*/s//File Name: " .expand ("%")
"autocmd bufnewfile *.tex exe "1," . 10 . "g/Creation Date:.*/s//Creation Date: " .strftime("%d-%m-%Y")
"autocmd Bufwritepre,filewritepre *.tex execute "normal ma"
"autocmd Bufwritepre,filewritepre *.tex exe "1," . 10 . "g/Last Modified:.*/s/Last Modified:.*/Last Modified: " .strftime("%c")
"autocmd bufwritepost,filewritepost *.tex execute "normal `a"

"auto header entry for py files"
"autocmd bufnewfile *.py so ~/misc/stubs/python/python_vim_header.txt
"autocmd bufnewfile *.py exe "1," . 10 . "g/File Name:.*/s//File Name: " .expand ("%")
"autocmd bufnewfile *.py exe "1," . 10 . "g/Creation Date:.*/s//Creation Date: " .strftime("%d-%m-%Y")
"autocmd Bufwritepre,filewritepre *.py execute "normal ma"
"autocmd Bufwritepre,filewritepre *.py exe "1," . 10 . "g/Last Modified:.*/s/Last Modified:.*/Last Modified: " .strftime("%c")
"autocmd bufwritepost,filewritepost *.py execute "normal `a"

"This is added to turn on highlighting in vim for tex files"
set t_Co=256
syn on

" REMEBER LINE LOCATION
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register 
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='20,\"500,:20,%,n~/.viminfo
function! ResCur()
  if line("'\"") <= line("$")
      normal! g`"
          return 1
            endif
            endfunction

            augroup resCur
              autocmd!
                autocmd BufWinEnter * call ResCur()
augroup END


" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" this is mostly a matter of taste. but LaTeX looks good with just a bit
" of indentation.
set sw=2
" TIP: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!
set iskeyword+=:

" adding keyboard alt-<arrow> for ctrl-w replacement in chrome
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" requires vim-python and python-git
" function! CommitFile()
" python << EOF
" import vim, git 
" curfile = vim.current.buffer.name
" if curfile:
"     try:
"         repo = git.Repo(curfile)
"         repo.git.add(curfile)
"         repo.git.commit(m='Update')
"     except (git.InvalidGitRepositoryError, git.GitCommandError):
"         pass
" EOF
" endfunction
" au BufWritePost * call CommitFile()
